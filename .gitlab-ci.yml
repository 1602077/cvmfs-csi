stages:
  - build
  - image
  - test
  - deploy
  - cleanup

before_script:
  - export CLUSTER_NAME=cvmfs-validation-$(echo $CI_COMMIT_SHA | head -c 6)
  - export OS_AUTH_URL="https://keystone.cern.ch/main/v3"
  - export OS_IDENTITY_API_VERSION="3"
  - export OS_USERNAME="svcbuild"
  - export OS_PASSWORD="$SVCBUILD_PASSWORD"
  - export OS_PROJECT_NAME="Cloud CI"
  - export OS_REGION_NAME="cern"
  - export OS_DEFAULT_DOMAIN_NAME="default"
  - export OS_TENANT_ID="ec9ce822-d12f-453e-9f18-110652a85798"
  - export OS_TENANT_NAME="Cloud CI"

build:
  stage: build
  image: gitlab-registry.cern.ch/cloud/ciadm
  script:
    - rpm --import https://mirror.go-repo.io/centos/RPM-GPG-KEY-GO-REPO
    - curl -s https://mirror.go-repo.io/centos/go-repo.repo | tee /etc/yum.repos.d/go-repo.repo
    - echo 'priority=1' >> /etc/yum.repos.d/go-repo.repo
    - yum install -y gcc git golang make
    - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN gitlab-registry.cern.ch
    - make
    - make test
  artifacts:
    expire_in: '10 days'
    paths:
      - _output/csi-cvmfsplugin
  except:
    - qa
    - master
  tags:
    - docker-privileged

build image:
  stage: image
  image: gitlab-registry.cern.ch/cloud/ciadm
  script:
    - cp _output/csi-cvmfsplugin deploy/docker
    - yum install -y make
    - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN gitlab-registry.cern.ch
    - docker build -t gitlab-registry.cern.ch/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME:$CI_COMMIT_SHA deploy/docker
    - docker push gitlab-registry.cern.ch/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME:$CI_COMMIT_SHA
  dependencies:
    - build
  except:
    - master
    - qa
  tags:
    - docker-privileged

test k8s:
  stage: test
  image: gitlab-registry.cern.ch/cloud/ciadm
  script:
    - openstack coe cluster create $CLUSTER_NAME --cluster-template kubernetes-1.13.3-1 --keypair lxplus --node-count 1 --master-count 1 --flavor m2.small
    - sleep 10
    - STATUS=$(openstack coe cluster show $CLUSTER_NAME -c status | grep 'status ' | awk '{print $4}')
    - while [ "$STATUS" != "CREATE_COMPLETE" ] && [ "$STATUS" != "CREATE_FAILED" ]; do STATUS=$(openstack coe cluster show $CLUSTER_NAME -c status | grep 'status ' | awk '{print $4}'); done
    - openstack coe cluster show $CLUSTER_NAME
    - openstack coe cluster config $CLUSTER_NAME
    - export KUBECONFIG=config
    - kubectl create --validate=false -f magnum-cvmfs.yaml
    - kubectl rollout status deployment/cvmfs
    - POD=$(kubectl get pod | grep cvmfs | awk '{print $1}')
    - kubectl exec $POD -c atlas cat /cvmfs/atlas.cern.ch/repo/ATLASLocalRootBase/README.INSTALL
    - kubectl exec $POD -c cms cat /cvmfs/cms.cern.ch/README
  dependencies:
    - build
  except:
    - master
    - qa

cleanup test clusters:
  stage: cleanup
  image: gitlab-registry.cern.ch/cloud/ciadm
  script:
     - openstack coe cluster show ${CLUSTER_NAME}; if [ $? -eq 0 ]; then openstack coe cluster delete ${CLUSTER_NAME} || true; fi
     - sleep 5
     - while openstack coe cluster show ${CLUSTER_NAME}; [ $? -eq 0 ]; do sleep 3; done
  when: always
  except:
    - master
    - qa

deploy tag:
  stage: deploy
  image: gitlab-registry.cern.ch/cloud/ciadm
  script:
    - docker pull gitlab-registry.cern.ch/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME:$CI_COMMIT_SHA
    - docker tag gitlab-registry.cern.ch/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME:$CI_COMMIT_SHA gitlab-registry.cern.ch/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME:$CI_COMMIT_TAG
    - docker push gitlab-registry.cern.ch/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME:$CI_COMMIT_TAG
  only:
    - tags
  tags:
    - docker-privileged
